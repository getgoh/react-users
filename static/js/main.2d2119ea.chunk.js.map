{"version":3,"sources":["api/resolve.js","api/userApi.js","components/UserList.jsx","containers/UserListPage.jsx","containers/App.jsx","serviceWorker.js","index.jsx"],"names":["promise","a","resolved","data","error","getUsers","result","resolve","axios","get","UserList","users","console","log","length","map","user","key","id","to","name","UserListPage","useState","userList","setUserList","setError","gu","useEffect","setTimeout","UsersNav","Navbar","bg","Brand","href","Toggle","Collapse","className","Nav","Link","exact","as","Text","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"gVAAA,yCAAe,WAAOA,GAAP,eAAAC,EAAA,6DACPC,EAAW,CACfC,KAAM,KACNC,MAAO,MAHI,kBAOWJ,EAPX,OAOXE,EAASC,KAPE,uDASXD,EAASE,MAAT,KATW,iCAYNF,GAZM,yDAAf,sDCIaG,EAAQ,uCAAG,4BAAAJ,EAAA,6DAChBK,EAASC,EAAQC,IAAMC,IAAI,+CADX,SAERH,EAFQ,uCAEAH,MAFA,2CAAH,qDCmBNO,MAnBf,YAA8B,IAAVC,EAAS,EAATA,MAElB,OADAC,QAAQC,IAAIF,GACPA,EAAMG,OAKT,oCACGH,EAAMI,KAAI,SAACC,GAAD,OACT,kBAAC,IAAD,CAAMC,IAAKD,EAAKE,GAAIC,GAAE,gBAAWH,EAAKE,KAAM,4BAAKF,EAAKI,WANnD,2CCwBIC,MA3Bf,WAAyB,IAAD,EACUC,mBAAS,IADnB,mBACfC,EADe,KACLC,EADK,OAEIF,mBAAS,MAFb,mBAEflB,EAFe,KAERqB,EAFQ,KAIhBpB,EAAQ,uCAAG,4BAAAJ,EAAA,sEACKyB,IADL,QACTf,EADS,QAELP,MACRqB,EAASd,EAAMP,OAEfoB,EAAYb,EAAMR,MALL,2CAAH,qDAgBd,OAPAwB,qBAAU,WAERC,YAAW,WACTvB,MACC,OACF,IAECD,EACK,qCAGF,kBAAC,EAAD,CAAUO,MAAOY,K,MCN1B,SAASM,IACP,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,SACT,kBAACD,EAAA,EAAOE,MAAR,CAAcC,KAAK,SAAnB,oBACA,kBAACH,EAAA,EAAOI,OAAR,MACA,kBAACJ,EAAA,EAAOK,SAAR,CAAiBC,UAAU,uBACzB,kBAACC,EAAA,EAAD,CAAKD,UAAU,WACb,kBAACC,EAAA,EAAIC,KAAL,CAAUL,KAAK,SAAf,QACA,kBAAC,IAAD,CAASG,UAAU,WAAWjB,GAAG,SAASoB,OAAK,GAA/C,SACA,kBAACF,EAAA,EAAIC,KAAL,CAAUE,GAAIF,IAAMnB,GAAG,UAAvB,UAEF,kBAACW,EAAA,EAAOW,KAAR,qBAEG,IACD,uBAAGR,KAAK,UAAR,gBAOKS,MAhCf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKN,UAAU,OACb,kBAACP,EAAD,MACA,kBAAC,IAAD,CAAOc,KAAK,SAASJ,OAAK,EAACK,UAAWvB,OCJ1BwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzD,GACLQ,QAAQR,MAAMA,EAAM0D,c","file":"static/js/main.2d2119ea.chunk.js","sourcesContent":["export default async (promise) => {\n  const resolved = {\n    data: null,\n    error: null,\n  };\n\n  try {\n    resolved.data = await promise;\n  } catch (e) {\n    resolved.error = e;\n  }\n\n  return resolved;\n};\n","/* eslint-disable import/prefer-default-export */\nimport axios from 'axios';\nimport resolve from './resolve';\n\nexport const getUsers = async () => {\n  const result = resolve(axios.get('https://jsonplaceholder.typicode.com/users'));\n  return (await result).data;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nfunction UserList({ users }) {\n  console.log(users);\n  if (!users.length) {\n    return <h3>Loading...</h3>;\n  }\n\n  return (\n    <>\n      {users.map((user) => (\n        <Link key={user.id} to={`/user/${user.id}`}><h1>{user.name}</h1></Link>\n      ))}\n    </>\n  );\n}\n\nUserList.propTypes = {\n  users: PropTypes.oneOfType([PropTypes.object]).isRequired,\n};\n\nexport default UserList;\n","import React, { useState, useEffect } from 'react';\nimport { getUsers as gu } from '../api/userApi';\nimport UserList from '../components/UserList';\n\nfunction UserListPage() {\n  const [userList, setUserList] = useState([]);\n  const [error, setError] = useState(null);\n\n  const getUsers = async () => {\n    const users = await gu();\n    if (users.error) {\n      setError(users.error);\n    } else {\n      setUserList(users.data);\n    }\n  };\n\n  useEffect(() => {\n    // simulate a slow connection (2 seconds)\n    setTimeout(() => {\n      getUsers();\n    }, 2000);\n  }, []);\n\n  if (error) {\n    return <h1>error</h1>;\n  }\n\n  return <UserList users={userList} />;\n}\n\nexport default UserListPage;\n","import React from 'react';\nimport {\n  BrowserRouter as Router, Route, Link, NavLink\n} from 'react-router-dom';\nimport './App.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport UserListPage from './UserListPage';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <UsersNav />\n        <Route path=\"/users\" exact component={UserListPage} />\n      </div>\n    </Router>\n  );\n}\n\nfunction UsersNav() {\n  return (\n    <Navbar bg=\"light\">\n      <Navbar.Brand href=\"#home\">Navbar with text</Navbar.Brand>\n      <Navbar.Toggle />\n      <Navbar.Collapse className=\"justify-content-end\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#home\">Home</Nav.Link>\n          <NavLink className=\"nav-link\" to=\"/users\" exact>Users</NavLink>\n          <Nav.Link as={Link} to=\"/users\">Users</Nav.Link>\n        </Nav>\n        <Navbar.Text>\n          Signed in as:\n          {' '}\n          <a href=\"#login\">Mark Otto</a>\n        </Navbar.Text>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}